@page "/"

@using System.Linq
@using System.Reflection
@* @using FlareSelect *@
@* @using FlareTables *@
@using Microsoft.AspNetCore.Components.Web
@using Superset.Common
@using Superset.Web.State

@{
    Random rd = new Random(2);


    // List<Option> optionsMultiple = new List<Option>();
    // foreach (Option ID in options)
    // {
    //     ID.Selected = rd.Next() % 2 == 0;
    //     optionsMultiple.Add(ID);
    // }

    UpdateTrigger triggerSearchClear = new UpdateTrigger();

}

@functions {

    // private TableStateHandler.ValueGetter _valueGetter;
    //
    // private IEnumerable<Contact> Data { get; set; }
    // private TableStateHandler _flareTable;
    //
    // // private FlareSelector fs2;
    //
    // private List<Option> options;
    //
    // private List<Option> optionsSingle;

    protected override void OnInitialized()
    {
    //     options = Generate.Contacts(15).Select(v => v.NameOption).ToList();
    //     optionsSingle = options.Select(v => v.Clone()).ToList();
    //
    //     // fs2 = new FlareSelector(_ => optionsSingle);
    //     // fs2.OnSearch += (string searchTerm) => { Console.WriteLine(searchTerm); };
    //     // fs2.OnUpdate += (List<IOption> selected) =>
    //     // {
    //     //     Console.WriteLine(selected.FirstOrDefault()?.Text);
    //     //     fs2.ClearSearch();
    //     // };
    //
    //     Console.WriteLine("ONINIT");
    //     _valueGetter = (row, id) => row.GetType().GetProperty(id)?.GetValue(row).ToString();
    //
    //     Data = Generate.Contacts(25);
    //     Data.First().Date = new DateTime();
    //     _flareTable = new TableStateHandler(() => Data.ToList(), StateHasChanged, typeof(Contact));
    }

}

@* <button @onclick="@(() => fs2.ClearSearch())" @onclick:stopPropagation>Clear inputs</button> *@

@* @fs2.Render() *@

@* <FlareTablePaginationButtons TableState="@_flareTable"></FlareTablePaginationButtons>  *@
@* <FlareTablePaginationSize TableState="@_flareTable"></FlareTablePaginationSize>  *@
@* <FlareTableColumnReset TableState="@_flareTable"></FlareTableColumnReset>  *@
@* *@
@* <table>  *@
@*     <thead>  *@
@*     <tr>  *@
@*         @foreach (PropertyInfo field in new Contact().GetType().GetProperties().ToList())  *@
@*         {  *@
@*             _flareTable.InitColumn(field.Name);  *@
@*             <th>@field.Name</th>  *@
@*         }  *@
@*     </tr>  *@
@*     <tr>  *@
@*         @foreach (PropertyInfo field in new Contact().GetType().GetProperties().ToList())  *@
@*         {  *@
@*             <th>  *@
@*                 <FlareTableColumnFilter TableState="@_flareTable" FieldID="@field.Name"></FlareTableColumnFilter>  *@
@*             </th>  *@
@*         }  *@
@*     </tr>  *@
@*     </thead>  *@
@*     <tbody>  *@
@*     @foreach (Contact row in _flareTable.Data())  *@
@*     {  *@
@*         <tr>  *@
@*             @foreach (PropertyInfo field in row.GetType().GetProperties().ToList())  *@
@*             {  *@
@*                 <td>@field.GetValue(row)</td>  *@
@*             }  *@
@*         </tr>  *@
@*     }  *@
@*     </tbody>  *@
@* </table>  *@
@* *@
@* <FlareTableInfo TableState="@_flareTable"></FlareTableInfo>  *@

<div class="BodyWrapper" style="width: 400px;">
    @* <FlareSelector GenerateBatches="@((_) => { return IDsSingle; })" Multiple="@false" TriggerSearchClear="@triggerSearchClear"/> *@
    @* <br> *@
    @* <FlareSelector GenerateBatches="@((_) => { return IDsMultiple; })" Multiple="@true" TriggerSearchClear="@triggerSearchClear"/> *@
    @* *@
    @* <br> *@
    @* <br> *@
    @* <br> *@
    @* <br> *@
    @* <br> *@
    @* <hr> *@
    @* *@
    @* <FlareSelector GenerateBatches="@((_) => { return Generate.Contacts(50).Select(v => v.LongOption).ToList(); })" Multiple="@false"/> *@
    @* <br> *@
    @* <FlareSelector GenerateBatches="@((_) => { return Generate.Contacts(50).Select(v => v.LongOption).ToList(); })" Multiple="@true"/> *@
</div>