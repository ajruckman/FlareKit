@typeparam T

@code {

    [CascadingParameter]
    public FlareTable<T> FlareTable { get; set; }

    [Parameter]
    public string ID { get; set; }
}

<TriggerWrapper Triggers="@(new UpdateTrigger[] {FlareTable.OnPagination})">
    @{
        Console.WriteLine("=== " + ID + " " + FlareTable.Info);
    }
    <div class="FlareTablePaginationButtons">
        <button @onclick="@FlareTable.Previous" disabled="@(!FlareTable.CanPrev)" class="FlareTablePaginationButton FlareTablePaginationButton--Previous">Previous</button>
        @foreach (int i in FlareTable.Pages())
        {
            if (i == -1)
            {
                <button class="FlareTablePaginationButton FlareTablePaginationButton--Skipped" disabled="disabled">&nbsp;</button>
            }
            else
            {
                <button @onclick="@(() => FlareTable.Jump(i))" class="FlareTablePaginationButton @(FlareTable.Current == i ? "FlareTablePaginationButton--Current" : "")">@(i + 1)</button>
            }
        }
        <button @onclick="@FlareTable.Next" disabled="@(!FlareTable.CanNext)" class="FlareTablePaginationButton FlareTablePaginationButton--Next">Next</button>
    </div>
</TriggerWrapper>