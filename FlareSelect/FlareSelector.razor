@using System.Collections.Generic
@using System.Diagnostics.CodeAnalysis
@using System.Linq
@using FlareLib
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JSRuntime

@code
{

    [Parameter]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public IEnumerable<Option> Options { get; set; }

    [Parameter]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public bool Multiple { get; set; }

    [Parameter]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public bool? CloseOnSelect { get; set; }
    
    [Parameter]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public bool Disabled { get; set; }
    
    [Parameter]
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
    public Events.OnUpdate OnUpdate { get; set; }

//    [CascadingParameter]
//    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
//    [SuppressMessage("ReSharper", "UnusedAutoPropertyAccessor.Global")]
//    public ElementClickHandler ElementClickHandler { get; set; }

    private SelectStateHandler SelectStateHandler { get; set; }

    private bool _hasRun;

    protected override void OnInitialized()
    {
        if (_hasRun)
            return;
        _hasRun = true;

        SelectStateHandler = new SelectStateHandler(
            Options,
            Multiple,
            CloseOnSelect,
            Disabled,
            OnUpdate,
            JSRuntime,
            StateHasChanged
            );
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        Console.WriteLine("provision");
        JSRuntime.InvokeVoidAsync("window.provision", DotNetObjectReference.Create(Global.ElementClickHandler), SelectStateHandler.InstanceID);
    }

}

<div class="@SelectStateHandler.ContainerClasses("Container")" id="@SelectStateHandler.InstanceID">
    <div class="@SelectStateHandler.ContainerClasses("SelectionContainer")">
        @foreach (Option option in SelectStateHandler.Selected)
        {
            <div class="FlareSelect_Selection FlareSelect_Selection--@(!Multiple ? "Single" : "Multiple")">
                <span class="FlareSelect_SelectionValue">@option.SelectedValue</span>
                <span class="FlareSelect_DeselectContainer">
                    <span class="FlareSelect_Deselect" @onclick="@(() => SelectStateHandler.Deselect(option))"></span>
                </span>
            </div>
        }

        @if (Multiple)
        {
            <div class="FlareSelect_SearchContainer FlareSelect_SearchContainer--Inline">
                <input class="FlareSelect_Search FlareSelect_Search--Inline" type="text" @oninput="@SelectStateHandler.Search" />
            </div>
        }
    </div>

    <div class="@SelectStateHandler.ContainerClasses("PaneContainer")">
        <div class="FlareSelect_Pane">
            @if (!Multiple)
            {
                <div class="FlareSelect_SearchContainer">
                    <input class="FlareSelect_Search" type="text" @oninput="@SelectStateHandler.Search" @onclick="@(() => SelectStateHandler.SearchClick())" />
                </div>
            }
            @if (SelectStateHandler.Filtered.Any())
            {
                <div class="FlareSelect_OptionContainer">
                    @foreach (Option option in SelectStateHandler.Filtered)
                    {
                        <div class="FlareSelect_Option" data-selected="@(SelectStateHandler.IsSelected(option))" @onclick="@(() => SelectStateHandler.Select(option))">
                            @option.DropdownValue
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="FlareSelect_NoResults">No results</div>
            }
        </div>
    </div>
</div>