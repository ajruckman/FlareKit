@using System.Linq
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using Superset.Common

@inject IJSRuntime JSRuntime

@* ReSharper disable MemberCanBePrivate.Global *@
@* ReSharper disable UnusedAutoPropertyAccessor.Global *@

@code
{

    [Parameter]
    public Events.Options Options { get; set; }

    [Parameter]
    public Events.Options OptionsFiltered { get; set; }

    [Parameter]
    public bool Multiple { get; set; }

    [Parameter]
    public bool? CloseOnSelect { get; set; }
    
    [Parameter]
    public bool Disabled { get; set; }
    
    [Parameter]
    public Events.OnUpdate OnUpdate { get; set; }
    
    [Parameter]
    public Events.OnSearch OnSearch { get; set; }

    [Parameter]
    public UpdateTrigger TriggerRefresh { get; set; }
    
    [Parameter]
    public string Placeholder { get; set; }
    
    // [Parameter]
    // public UpdateTrigger TriggerSelectionRefresh { get; set; }
   
    private SelectStateHandler SelectStateHandler { get; set; }
    private bool               _hasRun;

    protected override void OnInitialized()
    {
        if (_hasRun)
            return;
        _hasRun = true;

        OnSearch += _ => StateHasChanged();

        SelectStateHandler = new SelectStateHandler(
            Options,
            OptionsFiltered,
            Multiple,
            CloseOnSelect,
            Disabled,
            OnUpdate,
            OnSearch,
            TriggerRefresh,
            StateHasChanged
        );
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        JSRuntime.InvokeVoidAsync("window.provision", DotNetObjectReference.Create(Global.ElementClickHandler), SelectStateHandler.InstanceID);
    }

    private void OnKeyUp(KeyboardEventArgs args, Option option)
    {
        if (args.Key == "Enter")
        {
            SelectStateHandler.Select(option);
        }
    }
    
}

<div class="@SelectStateHandler.ContainerClasses("Container")" id="@SelectStateHandler.InstanceID" tabindex="0">
    <div class="@SelectStateHandler.ContainerClasses("SelectionContainer")">
        @if (SelectStateHandler.Selected.Any())
        {
            @foreach (Option option in SelectStateHandler.Selected)
            {
                <div class="FlareSelect_Selection FlareSelect_Selection--@(!Multiple ? "Single" : "Multiple")">
                    <span class="FlareSelect_SelectionValue">@option.SelectedValue</span>
                    <span class="FlareSelect_Deselect" @onclick="@(() => SelectStateHandler.Deselect(option))"></span>
                </div>
            }
        }
        else
        {
            <span class="FlareSelect_PlaceholderValue">@Placeholder</span>
        }

        @if (Multiple)
        {
            <div class="FlareSelect_SearchContainer FlareSelect_SearchContainer--Inline">
                <input class="FlareSelect_Search FlareSelect_Search--Inline" type="text" @oninput="@SelectStateHandler.Search"/>
            </div>
        }
    </div>

    <div class="@SelectStateHandler.ContainerClasses("PaneContainer")">
        <div class="FlareSelect_Pane">
            @if (!Multiple)
            {
                <div class="FlareSelect_SearchContainer">
                    <input class="FlareSelect_Search" type="text" @oninput="@SelectStateHandler.Search"/>
                </div>
            }
            @if (SelectStateHandler.Filtered.Any())
            {
                var tabIndex = 1;
                
                <div class="FlareSelect_OptionContainer">
                    @foreach (Option option in SelectStateHandler.Filtered)
                    {
                        <div class="FlareSelect_Option" data-selected="@(SelectStateHandler.IsSelected(option))" tabindex="@(tabIndex++)" 
                            @onclick="@(() => SelectStateHandler.Select(option))"  
                            @onkeyup="@((args) =>  OnKeyUp(args, option))">@option.DropdownValue</div>
                    }
                </div>
            }
            else
            {
                <div class="FlareSelect_NoResults">No results</div>
            }
        </div>
    </div>
</div>